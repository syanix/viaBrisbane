---
import { getEventsByPage } from '../utils/eventsCache';
import { createSlug } from '../utils/slug';

const { page = 1, searchQuery = '', limit } = Astro.props;
const { events, totalPages } = await getEventsByPage(Astro.locals.runtime.env.DB, page, searchQuery);

// If limit is provided, slice the events array
const displayEvents = limit ? events.slice(0, limit) : events;
---

<!-- Events Section -->
<section id="events-section" class="highlight-section events-section">
    <div class="content-box">
        <h2 class="section-heading">Upcoming Events in Brisbane</h2>

        {!limit && (
            <div class="search-container">
                <input 
                    type="text" 
                    id="eventSearch"
                    placeholder="Search events by name..."
                    value={searchQuery}
                />
            </div>
        )}

        <div id="events-container">
            {displayEvents.length > 0 ? (
                <ul>
                    {displayEvents.map((event) => (
                        <li>
                            <div>
                                <a href={`/events/${createSlug(
                                    event.subject || undefined,
                                    event.location || undefined,
                                    event.event_id
                                )}`}>
                                    <div class="image-container">
                                        <img 
                                            src={event.eventimage || '/images/default-image.jpg'} 
                                            alt={event.subject || 'No Title'} 
                                        />
                                    </div>
                                    <h3 class="title">
                                        {event.subject || 'No Title'}
                                    </h3>
                                </a>
                                <p><strong>Date:</strong> {event.formatteddatetime || 'No Date'}</p>
                                <p><strong>Location:</strong> {event.location || 'No Location'}</p>
                                <p>
                                    {event.description?.length && event.description.length > 300
                                        ? `${event.description.slice(0, 300)}...`
                                        : event.description || 'No Description'}
                                </p>
                                <a href={`/events/${createSlug(
                                    event.subject || undefined,
                                    event.location || undefined,
                                    event.event_id
                                )}`} class="button primary more-info-button">
                                    More Event Info
                                </a>
                            </div>
                        </li>
                    ))}
                </ul>
            ) : (
                <p>No events available at the moment. Please try again later.</p>
            )}
        </div>

        {!limit && totalPages > 1 && (
            <div class="pagination">
                <a 
                    href={`/events?page=1${searchQuery ? `&search=${searchQuery}` : ''}`}
                    class={page === 1 ? 'disabled' : ''}
                >
                    First
                </a>
                <a 
                    href={`/events?page=${page - 1}${searchQuery ? `&search=${searchQuery}` : ''}`}
                    class={page === 1 ? 'disabled' : ''}
                >
                    Previous
                </a>

                {Array.from({ length: Math.min(totalPages, 5) }, (_, i) => {
                    const pageNum = Math.max(1, page - 2) + i;
                    if (pageNum > totalPages) return null;
                    return (
                        <a 
                            href={`/events?page=${pageNum}${searchQuery ? `&search=${searchQuery}` : ''}`}
                            class={pageNum === page ? 'active' : ''}
                        >
                            {pageNum}
                        </a>
                    );
                })}

                <a 
                    href={`/events?page=${page + 1}${searchQuery ? `&search=${searchQuery}` : ''}`}
                    class={page === totalPages ? 'disabled' : ''}
                >
                    Next
                </a>
                <a 
                    href={`/events?page=${totalPages}${searchQuery ? `&search=${searchQuery}` : ''}`}
                    class={page === totalPages ? 'disabled' : ''}
                >
                    Last
                </a>
            </div>
        )}
    </div>
</section>

<script>
    const searchInput = document.getElementById('eventSearch') as HTMLInputElement;
    if (searchInput) {
        let debounceTimer: ReturnType<typeof setTimeout>;
        const currentValue = searchInput.value;

        searchInput.addEventListener('input', (e) => {
            const input = e.target as HTMLInputElement;
            const currentPosition = input.selectionStart;
            
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => {
                const searchValue = input.value;
                if (searchValue !== currentValue) {
                    const url = new URL(window.location.href);
                    if (searchValue) {
                        url.searchParams.set('search', searchValue);
                    } else {
                        url.searchParams.delete('search');
                    }
                    url.searchParams.set('page', '1');
                    window.location.href = url.toString();
                }
            }, 1000);

            input.focus();
            input.setSelectionRange(currentPosition, currentPosition);
        });
    }
</script>