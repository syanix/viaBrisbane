---
import { getEventsByPage } from '../utils/eventsCache';
import { createSlug } from '../utils/slug';
import type { Event } from '../types/types';

const { page = 1, searchQuery = '', limit, includeExpired = false, events: propEvents, totalPages: propTotalPages } = Astro.props;

// Use provided events and totalPages if available, otherwise fetch them
const { events, totalPages } = propEvents && propTotalPages !== undefined
    ? { events: propEvents, totalPages: propTotalPages }
    : await getEventsByPage(Astro.locals.runtime.env.DB, page, searchQuery, includeExpired);

// If limit is provided, slice the events array
const displayEvents = limit ? events.slice(0, limit) : events;

// Determine if pagination should be shown
const showPagination = !limit && totalPages > 1 && events.length > 0;
---

<!-- Events Section -->
<section id="events-section" class="highlight-section events-section">
    <div class="content-box">
        <h1 class="section-heading">{includeExpired ? "Past Events Archive" : "Upcoming Events in Brisbane"}</h1>

        {!limit && (
            <div class="search-container">
                <input 
                    type="text" 
                    id="eventSearch"
                    placeholder="Search events by name..."
                    value={searchQuery}
                />
                <div class="filter-options">
                    <a href={includeExpired 
                        ? `/events${searchQuery ? `?search=${searchQuery}` : ''}` 
                        : `/events?archive=true${searchQuery ? `&search=${searchQuery}` : ''}`
                    } class="button secondary">
                        {includeExpired ? "View Upcoming Events" : "View Past Events Archive"}
                    </a>
                </div>
            </div>
        )}

        <div id="events-container">
            {displayEvents.length > 0 ? (
                <ul>
                    {displayEvents.map((event: any) => (
                        <li>
                                <a href={`/events/${event.slug || createSlug(
                                    event.subject || '',
                                    event.location || ''
                                )}`}>
                                    <div class="image-container">
                                        <img 
                                            src={event.eventimage || '/images/default-image.jpg'} 
                                            alt={event.subject || 'No Title'} 
                                        />
                                    </div>
                                    <h3 class="title">
                                        {event.subject || 'No Title'}
                                    </h3>
                                </a>
                                <p><strong>Date:</strong> {event.formatteddatetime || 'No Date'}</p>
                                <p><strong>Location:</strong> {event.location || 'No Location'}</p>
                                <p>
                                    {event.description && event.description.length > 300
                                        ? `${event.description.slice(0, 300)}...`
                                        : event.description || 'No Description'}
                                </p>
                                <a href={`/events/${event.slug || createSlug(
                                    event.subject || '',
                                    event.location || ''
                                )}`} class="button primary more-info-button">
                                    More Event Info
                                </a>

                        </li>
                    ))}
                </ul>
            ) : (
                <p>No events available at the moment. Please try again later.</p>
            )}
        </div>

        {showPagination && (
            <div class="pagination">
                {page > 1 && (
                    <>
                        <a 
                            href={`/events?page=1${includeExpired ? '&archive=true' : ''}${searchQuery ? `&search=${searchQuery}` : ''}`}
                        >
                            First
                        </a>
                        <a 
                            href={`/events?page=${page - 1}${includeExpired ? '&archive=true' : ''}${searchQuery ? `&search=${searchQuery}` : ''}`}
                        >
                            Previous
                        </a>
                    </>
                )}

                {Array.from({ length: Math.min(totalPages, 5) }, (_, i) => {
                    const pageNum = Math.max(1, Math.min(page - 2, totalPages - 4)) + i;
                    if (pageNum > totalPages || pageNum < 1) return null;
                    return (
                        <a 
                            href={`/events?page=${pageNum}${includeExpired ? '&archive=true' : ''}${searchQuery ? `&search=${searchQuery}` : ''}`}
                            class={pageNum === page ? 'active' : ''}
                        >
                            {pageNum}
                        </a>
                    );
                })}

                {page < totalPages && (
                    <>
                        <a 
                            href={`/events?page=${page + 1}${includeExpired ? '&archive=true' : ''}${searchQuery ? `&search=${searchQuery}` : ''}`}
                        >
                            Next
                        </a>
                        <a 
                            href={`/events?page=${totalPages}${includeExpired ? '&archive=true' : ''}${searchQuery ? `&search=${searchQuery}` : ''}`}
                        >
                            Last
                        </a>
                    </>
                )}
            </div>
        )}
    </div>
</section>

<script>
    const searchInput = document.getElementById('eventSearch') as HTMLInputElement;
    if (searchInput) {
        let debounceTimer: ReturnType<typeof setTimeout>;
        const currentValue = searchInput.value;

        searchInput.addEventListener('input', (e) => {
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => {
                const searchValue = (e.target as HTMLInputElement).value.trim();
                if (searchValue !== currentValue) {
                    const url = new URL(window.location.href);
                    
                    if (searchValue) {
                        url.searchParams.set('search', searchValue);
                    } else {
                        url.searchParams.delete('search');
                    }
                    
                    // Reset to page 1 when searching
                    url.searchParams.set('page', '1');
                    
                    // Preserve the archive parameter if it exists
                    if (url.searchParams.has('archive')) {
                        url.searchParams.set('archive', 'true');
                    }
                    
                    window.location.href = url.toString();
                }
            }, 500);
        });
    }
</script>