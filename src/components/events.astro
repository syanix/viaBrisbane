---
declare var globalThis: {
    _eventsCache?: Record<string, { data: any; expiry: number }>;
};
const { limit = 6 } = Astro.props; // Default to 6 if no limit is provided
const eventsApiUrl = `https://events.data.viabrisbane.com?limit=${limit}`;
let eventsData = [];

// In-memory cache for the events
const CACHE_EXPIRY_MS = 60 * 60 * 1000 * 24; // Cache expiry time: 24 hours
const cache = globalThis._eventsCache || (globalThis._eventsCache = {});

async function fetchWithCache(url: string) {
    const now = Date.now();

    // Check if cached data exists and is still valid
    if (cache[url] && cache[url].expiry > now) {
        console.log("Serving data from cache.");
        return cache[url].data;
    }

    // Fetch fresh data and update the cache
    try {
        console.log("Fetching fresh data from API...");
        const response = await fetch(url);
        if (!response.ok) {
            console.error(`API responded with status ${response.status}`);
            return { results: [] }; // Fallback to empty results
        }

        const data = await response.json();
        cache[url] = {
            data,
            expiry: now + CACHE_EXPIRY_MS, // Set cache expiry time
        };
        return data;
    } catch (error) {
        if (error instanceof Error) {
            console.error("Error fetching data:", error.message);
        } else {
            console.error("Unknown error occurred:", error);
        }
        return { results: [] }; // Fallback to empty results
    }
}

// Fetch data with caching
try {
    const apiResponse = await fetchWithCache(eventsApiUrl);
    eventsData = apiResponse.results || [];
} catch (error) {
    if (error instanceof Error) {
        console.error("Failed to fetch events:", error.message);
    } else {
        console.error("Unknown error occurred:", error);
    }
}
---

<!-- Events Section -->
<section id="events-section" class="highlight-section" data-events-count={limit}>
    <div class="content-box">
        <h2 class="section-heading">Upcoming Events in Brisbane</h2>
        <div id="events-container">
            {eventsData.length > 0 ? (
                <ul>
                    {eventsData.map((event: {
                        eventimage?: string;
                        subject?: string;
                        web_link?: string;
                        formatteddatetime?: string;
                        location?: string;
                        cost?: string;
                        bookings?: string;
                        description?: string;
                    }) => (
                        <li>
                            <img src={event.eventimage || '/images/default-image.jpg'} alt={event.subject || 'No Title'} />
                            <div>
                                <a href={event.web_link || '#'} target="_blank" class="title">{event.subject || 'No Title'}</a>
                                <p>Date: {event.formatteddatetime || 'No Date'}</p>
                                <p>Location: {event.location || 'No Location'}</p>
                                <p>Cost: {event.cost || 'Free'}</p>
                                <p>{event.bookings || 'No booking information available'}</p>
                                <p>
                                    {event.description?.length && event.description.length > 100
                                        ? `${event.description.slice(0, 100)}...`
                                        : event.description || 'No Description'}
                                </p>
                            </div>
                        </li>
                    ))}
                </ul>
            ) : (
                <p>No events available at the moment. Please try again later.</p>
            )}
        </div>
    </div>
</section>