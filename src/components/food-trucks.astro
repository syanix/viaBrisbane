---
import { getFoodTrucksByPage } from '../utils/foodTrucksCache';
import { createTruckSlugByTruck } from '../utils/slug';
import type { FoodTruck } from '../types/types';

const { page = 1, searchQuery = '', trucks: propTrucks, totalPages: propTotalPages } = Astro.props;

// Use provided trucks and totalPages if available, otherwise fetch them
const { trucks, totalPages } = propTrucks && propTotalPages !== undefined
    ? { trucks: propTrucks, totalPages: propTotalPages }
    : await getFoodTrucksByPage(Astro.locals.runtime.env.DB, page, searchQuery);

// Determine if pagination should be shown
const showPagination = totalPages > 1 && trucks.length > 0;
---

<!-- Hero Section -->
<section class="relative">
  <div class="h-[50vh] min-h-[400px] bg-slate-800 overflow-hidden">
    <img 
      src="https://images.unsplash.com/photo-1565123409695-7b5ef63a2efb?q=80&w=1920&auto=format&fit=crop" 
      alt="Food Trucks in Brisbane" 
      class="w-full h-full object-cover opacity-60"
    />
    <div class="absolute inset-0 flex flex-col justify-center items-center text-center px-4">
      <h1 class="text-4xl md:text-5xl font-bold text-white mb-4">
        Food Trucks in Brisbane
      </h1>
      <p class="text-xl text-white max-w-3xl">
        Discover Brisbane's vibrant food truck scene offering diverse cuisines and unique culinary experiences.
      </p>
    </div>
  </div>
</section>

<!-- Food Trucks Section -->
<section class="py-16 bg-white">
  <div class="mx-auto px-4">
    <div class="max-w-5/6 mx-auto mb-12">
      <div class="bg-slate-50 p-6 rounded-lg shadow-sm">
        <div class="flex items-center">
          <div class="w-5/6">
            <label for="truckSearch" class="block text-lg font-medium text-slate-700 mb-2">Search Food Trucks</label>
            <input 
              type="text" 
              id="truckSearch"
              placeholder="Search by name or category..."
              value={searchQuery}
              class="w-full px-4 py-3 border border-slate-300 rounded-md focus:ring-2 focus:ring-[#2073E0] focus:border-[#2073E0] outline-none"
            />
          </div>
        </div>
      </div>
    </div>

    {trucks.length > 0 ? (
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-6xl mx-auto">
        {trucks.map((truck: FoodTruck) => (
          <div class="h-full">
            <div class="bg-white flex flex-col h-full shadow-[0px_2px_8px_rgba(0,0,0,0.1)]">
              <div class="relative">
                <!-- Image container -->
                <div class="relative pb-[66%] overflow-hidden">
                  <img 
                    src={truck.cover_photo || '/images/default-food-truck.jpg'} 
                    alt={`${truck.name} - ${truck.category} food truck in Brisbane`}
                    class="absolute inset-0 w-full h-full object-cover"
                    loading="lazy"
                  />
                </div>
              </div>
              
              <!-- Category tags -->
              <div class="flex flex-wrap gap-2 mt-4 px-4">
                {truck.category && (
                  <a href={`/food-trucks?search=${encodeURIComponent(truck.category)}`} 
                     class="text-white px-3 py-1 text-sm font-bold rounded-sm bg-[#2073E0]">
                    {truck.category}
                  </a>
                )}
              </div>
              
              <!-- Content -->
              <div class="p-4 flex flex-col flex-1">
                <div class="flex-1">
                  <h3 class="text-2xl font-bold mb-2 line-clamp-2">{truck.name}</h3>
                  <p class="text-gray-700 text-base mb-4 line-clamp-3">{truck.bio?.substring(0, 120)}...</p>
                </div>
                
                <!-- Button -->
                <div class="flex items-center mt-auto">
                  <a href={`/food-trucks/${createTruckSlugByTruck(truck)}`} 
                     class="inline-flex items-center text-black text-md uppercase group">
                    <span class="font-black border-b-2 border-transparent group-hover:border-black transition-colors duration-200">VIEW DETAILS</span>
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-9 w-9 ml-2 -mt-[3px]" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                    </svg>
                  </a>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    ) : (
      <div class="text-center py-12">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-16 h-16 mx-auto text-slate-400 mb-4">
          <path stroke-linecap="round" stroke-linejoin="round" d="M13.5 21v-7.5a.75.75 0 01.75-.75h3a.75.75 0 01.75.75V21m-4.5 0H2.36m11.14 0H18m0 0h3.64m-1.39 0V9.349m-16.5 11.65V9.35m0 0a3.001 3.001 0 003.75-.615A2.993 2.993 0 009.75 9.75c.896 0 1.7-.393 2.25-1.016a2.993 2.993 0 002.25 1.016c.896 0 1.7-.393 2.25-1.016a3.001 3.001 0 003.75.614m-16.5 0a3.004 3.004 0 01-.621-4.72L4.318 3.44A1.5 1.5 0 015.378 3h13.243a1.5 1.5 0 011.06.44l1.19 1.189a3 3 0 01-.621 4.72m-13.5 8.65h3.75a.75.75 0 00.75-.75V13.5a.75.75 0 00-.75-.75H6.75a.75.75 0 00-.75.75v3.75c0 .415.336.75.75.75z" />
        </svg>
        <p class="text-xl text-slate-700">No food trucks available at the moment.</p>
        <p class="mt-2 text-slate-500">Please try a different search or check back later.</p>
      </div>
    )}

    {showPagination && (
      <div class="flex justify-center mt-12 gap-2">
        {page > 1 && (
          <>
            <a 
              href={`/food-trucks?page=1${searchQuery ? `&search=${searchQuery}` : ''}`}
              class="flex items-center justify-center px-4 py-2 border border-slate-300 rounded-md text-sm font-medium text-slate-700 hover:bg-slate-50"
            >
              First
            </a>
            <a 
              href={`/food-trucks?page=${page - 1}${searchQuery ? `&search=${searchQuery}` : ''}`}
              class="flex items-center justify-center px-4 py-2 border border-slate-300 rounded-md text-sm font-medium text-slate-700 hover:bg-slate-50"
            >
              Previous
            </a>
          </>
        )}

        {Array.from({ length: Math.min(totalPages, 5) }, (_, i) => {
          const pageNum = Math.max(1, Math.min(page - 2, totalPages - 4)) + i;
          if (pageNum > totalPages || pageNum < 1) return null;
          return (
            <a 
              href={`/food-trucks?page=${pageNum}${searchQuery ? `&search=${searchQuery}` : ''}`}
              class={`flex items-center justify-center px-4 py-2 border rounded-md text-sm font-medium ${pageNum === page 
                ? 'bg-[#2073E0] text-white border-[#2073E0]' 
                : 'border-slate-300 text-slate-700 hover:bg-slate-50'}`}
            >
              {pageNum}
            </a>
          );
        })}

        {page < totalPages && (
          <>
            <a 
              href={`/food-trucks?page=${page + 1}${searchQuery ? `&search=${searchQuery}` : ''}`}
              class="flex items-center justify-center px-4 py-2 border border-slate-300 rounded-md text-sm font-medium text-slate-700 hover:bg-slate-50"
            >
              Next
            </a>
            <a 
              href={`/food-trucks?page=${totalPages}${searchQuery ? `&search=${searchQuery}` : ''}`}
              class="flex items-center justify-center px-4 py-2 border border-slate-300 rounded-md text-sm font-medium text-slate-700 hover:bg-slate-50"
            >
              Last
            </a>
          </>
        )}
      </div>
    )}
  </div>
</section>

<script>
    const searchInput = document.getElementById('truckSearch') as HTMLInputElement;
    if (searchInput) {
        let debounceTimer: ReturnType<typeof setTimeout>;
        const currentValue = searchInput.value;

        searchInput.addEventListener('input', (e) => {
            const input = e.target as HTMLInputElement;
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => {
                const searchValue = input.value.trim();
                if (searchValue !== currentValue) {
                    const url = new URL(window.location.href);
                    if (searchValue) {
                        url.searchParams.set('search', searchValue);
                    } else {
                        url.searchParams.delete('search');
                    }
                    url.searchParams.set('page', '1');
                    window.location.href = url.toString();
                }
            }, 500);
        });
    }
</script> 