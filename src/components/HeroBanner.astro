---
import type { Event } from '../types/types';

interface Props {
  featuredEvents: Partial<Event>[];
}

const { featuredEvents } = Astro.props;
---

<!-- Hero Banner -->
<section class="relative bg-black text-white">
  <div class="hero-carousel relative overflow-hidden h-[70vh]">
    <!-- Hero Slides -->
    <div class="hero-slides flex transition-transform duration-700 h-full">
      {featuredEvents.length > 0 ? (
        featuredEvents.map((event) => (
          <div class="hero-slide w-full flex-shrink-0 relative">
            <img 
              src={event.eventimage || '/images/banner-events.jpg'} 
              alt={event.subject || 'Brisbane Event'} 
              class="w-full h-full object-cover"
            >
            <!-- Dark overlay for better contrast -->
            <div class="absolute inset-0 bg-black opacity-40"></div>
            
            <!-- Gradient overlay for improved text legibility -->
            <div class="absolute inset-0 bg-gradient-to-t from-black/70 via-black/30 to-transparent"></div>
            
            <div class="absolute inset-0 flex items-center">
              <div class="mx-auto px-4">
                <div class="max-w-2xl">
                  <h1 class="text-5xl md:text-6xl font-bold mb-4 drop-shadow-lg">{event.subject}</h1>
                  <p class="text-xl text-white mb-2 drop-shadow-md">{event.location}`}</p>
                  <p class="text-lg text-white mb-8 drop-shadow-md">{event.formatteddatetime}</p>
                  <a href={`/events/${event.slug}`} class="inline-block bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-6 text-lg transition-colors shadow-md rounded-lg">
                    View Event
                  </a>
                </div>
              </div>
            </div>
          </div>
        ))
      ) : (
        // Fallback slides if no featured events
        <>
          <div class="hero-slide w-full flex-shrink-0 relative">
            <img 
              src="/images/banner-events.jpg" 
              alt="Brisbane Events" 
              class="w-full h-full object-cover"
            >
            <!-- Dark overlay for better contrast -->
            <div class="absolute inset-0 bg-black opacity-40"></div>
            
            <!-- Gradient overlay for improved text legibility -->
            <div class="absolute inset-0 bg-gradient-to-t from-black/70 via-black/30 to-transparent"></div>
            
            <div class="absolute inset-0 flex items-center">
              <div class="mx-auto px-4">
                <div class="max-w-2xl">
                  <h1 class="text-5xl md:text-6xl font-bold mb-4 drop-shadow-lg">Brisbane Events</h1>
                  <p class="text-xl text-white mb-8 drop-shadow-md">Find the best events, festivals, and performances happening in Brisbane.</p>
                  <a href="/events" class="inline-block bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-6 text-lg transition-colors shadow-md rounded-lg">
                    See Events
                  </a>
                </div>
              </div>
            </div>
          </div>
          <div class="hero-slide w-full flex-shrink-0 relative">
            <img 
              src="/images/banner-food-trucks.jpg" 
              alt="Brisbane Food Trucks" 
              class="w-full h-full object-cover"
            >
            <!-- Dark overlay for better contrast -->
            <div class="absolute inset-0 bg-black opacity-40"></div>
            
            <!-- Gradient overlay for improved text legibility -->
            <div class="absolute inset-0 bg-gradient-to-t from-black/70 via-black/30 to-transparent"></div>
            
            <div class="absolute inset-0 flex items-center">
              <div class="mx-auto px-4">
                <div class="max-w-2xl">
                  <h1 class="text-5xl md:text-6xl font-bold mb-4 drop-shadow-lg">Brisbane Food Trucks</h1>
                  <p class="text-xl text-white mb-8 drop-shadow-md">Find the best food trucks in Brisbane.</p>
                  <a href="/food-trucks" class="inline-block bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-6 text-lg transition-colors shadow-md rounded-lg">
                    Find Food Trucks
                  </a>
                </div>
              </div>
            </div>
          </div>
        </>
      )}
    </div>
    
    <!-- Hero Navigation -->
    <div class="absolute bottom-8 left-0 right-0 flex justify-center space-x-2">
      {(featuredEvents.length > 0 ? featuredEvents : [1, 2]).map((_, index) => (
        <button class="hero-dot w-3 h-3 rounded-full bg-white bg-opacity-50 hover:bg-opacity-100 transition-opacity" data-index={index}></button>
      ))}
    </div>
    
    <!-- Hero Arrows -->
    <button class="hero-prev absolute top-1/2 left-4 -translate-y-1/2 bg-black bg-opacity-50 text-white w-10 h-10 flex items-center justify-center z-10 hover:bg-blue-400 transition-colors">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
      </svg>
    </button>
    
    <button class="hero-next absolute top-1/2 right-4 -translate-y-1/2 bg-black bg-opacity-50 text-white w-10 h-10 flex items-center justify-center z-10 hover:bg-blue-400 transition-colors">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
      </svg>
    </button>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Hero Carousel
    const heroSlides = document.querySelector('.hero-slides');
    const heroDots = document.querySelectorAll('.hero-dot');
    const heroPrev = document.querySelector('.hero-prev');
    const heroNext = document.querySelector('.hero-next');
    
    if (heroSlides && heroDots.length && heroPrev && heroNext) {
      let currentSlide = 0;
      const totalSlides = heroDots.length;
      
      // Set initial active dot
      heroDots[0].classList.add('bg-opacity-100');
      
      // Update slide position
      const updateSlidePosition = () => {
        if (heroSlides instanceof HTMLElement) {
          heroSlides.style.transform = `translateX(-${currentSlide * 100}%)`;
        }
        
        // Update dots
        heroDots.forEach((dot, index) => {
          dot.classList.toggle('bg-opacity-100', index === currentSlide);
          dot.classList.toggle('bg-opacity-50', index !== currentSlide);
        });
      };
      
      // Handle dot clicks
      heroDots.forEach((dot, index) => {
        dot.addEventListener('click', () => {
          currentSlide = index;
          updateSlidePosition();
        });
      });
      
      // Handle prev button
      heroPrev.addEventListener('click', () => {
        currentSlide = (currentSlide - 1 + totalSlides) % totalSlides;
        updateSlidePosition();
      });
      
      // Handle next button
      heroNext.addEventListener('click', () => {
        currentSlide = (currentSlide + 1) % totalSlides;
        updateSlidePosition();
      });
      
      // Auto rotate slides
      setInterval(() => {
        currentSlide = (currentSlide + 1) % totalSlides;
        updateSlidePosition();
      }, 5000);
    }
  });
</script> 