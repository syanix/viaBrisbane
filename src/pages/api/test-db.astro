---
import { D1Database } from '@cloudflare/workers-types';

export interface Env {
  DB: D1Database;
}

export async function get({ env }: { env: Env }) {
  let logs: string[] = []; // Collect logs to include in the response

  try {
    logs.push("Starting database connection test...");

    // Step 1: Verify Database Connection
    if (!env.DB) {
      logs.push("Error: DB binding is undefined.");
      throw new Error("D1Database binding 'DB' is not available. Check your environment configuration.");
    }
    logs.push("Testing database connection...");
    const connectionTest = await env.DB.prepare("SELECT 1;").all();
    logs.push(`Database connection test passed: ${JSON.stringify(connectionTest)}`);

    // Step 2: Fetch Table Names
    logs.push("Fetching table names...");
    const tableResult = await env.DB.prepare(
      "SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%';"
    ).all();
    logs.push(`Raw table query result: ${JSON.stringify(tableResult)}`);

    if (!tableResult?.results || tableResult.results.length === 0) {
      logs.push("No user-defined tables found in the database.");
      throw new Error("No user-defined tables found in the database.");
    }

    const tables = (tableResult.results as { name: string }[]).map((row) => row.name);
    logs.push(`Found tables: ${JSON.stringify(tables)}`);

    // Step 3: Fetch Row Counts for Each Table
    const tableDetails = [];
    for (const table of tables) {
      logs.push(`Fetching row count for table: ${table}`);
      const rowCountResult = await env.DB.prepare(
        `SELECT COUNT(*) as row_count FROM ${table};`
      ).all();
      logs.push(`Row count query result for ${table}: ${JSON.stringify(rowCountResult)}`);
      
      const rowCount = rowCountResult.results?.[0]?.row_count || 0;
      logs.push(`Table: ${table}, Row Count: ${rowCount}`);

      tableDetails.push({ table, row_count: rowCount });
    }

    // Step 4: Respond with Table Details and Logs
    logs.push("Database test completed successfully.");
    logs.push(`Final table details: ${JSON.stringify(tableDetails)}`);
    return new Response(
      JSON.stringify({ success: true, tables: tableDetails, logs }, null, 2),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  } catch (error) {
    // Enhanced error handling
    const err = error as Error;
    logs.push(`Database test failed: ${err.message}`);
    console.error("Database test failed:", err.message, err.stack);

    return new Response(
      JSON.stringify(
        {
          success: false,
          error: err.message,
          hint: "Ensure your database is properly connected and populated.",
          logs,
        },
        null,
        2
      ),
      {
        status: 500,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );
  }
}
---