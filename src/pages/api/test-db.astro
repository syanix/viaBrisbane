---
import { queryDatabase, testDatabaseConnection } from '../../utils/database';

let htmlContent: string = `<h1>Database Connection Test</h1>`;

try {
  // Step 1: Identify database type
  const isLocal: boolean = typeof globalThis._isCloudflare === 'undefined';
  const dbType: string = isLocal ? 'Local SQLite Database' : 'Cloudflare D1 Database';
  htmlContent += `<p><strong>Connected to:</strong> ${dbType}</p>`;

  // Step 2: Test database connection
  htmlContent += `<h2>Step 1: Testing Database Connection</h2>`;
  const connectionTest: string = await testDatabaseConnection();
  htmlContent += `<p>${connectionTest}</p>`;

  // Step 3: Fetch table names
  htmlContent += `<h2>Step 2: Fetching Table Names</h2>`;
  const tableNamesQuery: string = `
    SELECT name FROM sqlite_master 
    WHERE type='table' AND name NOT LIKE 'sqlite_%';
  `;
  const tablesResult = await queryDatabase<{ name: string }>(tableNamesQuery);
  const tables: string[] = tablesResult.map((row) => row.name);

  if (tables.length === 0) {
    htmlContent += `<p style="color:red;">No user-defined tables found in the database.</p>`;
  } else {
    htmlContent += `<p>Found Tables:</p><ul>`;
    tables.forEach((table) => {
      htmlContent += `<li>${table}</li>`;
    });
    htmlContent += `</ul>`;
  }

  // Step 4: Fetch row counts for each table
  htmlContent += `<h2>Step 3: Fetching Row Counts</h2>`;
  for (const table of tables) {
    const rowCountQuery: string = `SELECT COUNT(*) as row_count FROM ${table};`;
    const rowCountResult = await queryDatabase<{ row_count: number }>(rowCountQuery);
    const rowCount: number = rowCountResult[0]?.row_count || 0;
    htmlContent += `<p>Table: <strong>${table}</strong>, Rows: <strong>${rowCount}</strong></p>`;
  }

  htmlContent += `<h2 style="color:green;">Database Test Completed Successfully!</h2>`;
} catch (error) {
  const errorMessage: string =
    error instanceof Error ? error.message : 'Unknown error';
  const errorStack: string = error instanceof Error ? error.stack || '' : '';
  htmlContent += `
    <h2 style="color:red;">Error Occurred During Test</h2>
    <p>${errorMessage}</p>
    <pre>${errorStack}</pre>
  `;
}
---
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Database Test</title>
</head>
<body>
  <div>
    <!-- Render dynamic HTML content -->
    <div set:html={htmlContent}></div>
  </div>
</body>
</html>